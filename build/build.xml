<?xml version="1.0"?>

<!-- you need to update the build.properties file for this to work -->

<project default="deploy" basedir="..">
	
	<property file="build/build.properties" />
	<tstamp />

	<!--
		========================================================================
		Names of deliverables
		========================================================================
	-->
	<!--
	<property name="jar.name" value="${project.name}-${project.version}-${DSTAMP}.jar" />
	-->
	<property name="jar.name" value="${project.name}-${project.version}.jar" />
	<property name="javadoc.zip" value="${project.name}-javadoc.zip" />

	<!--
		========================================================================
		classpath definitions here
		======================================================================== 
	-->
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="*.jar"/>
	</path>
	
	<patternset id="binary">
		<include name="**/*.dat" />
	</patternset>
	<patternset id="ascii">
		<exclude name="**/*.dat" />
	</patternset>

	<!--
		========================================================================
		Initialize the build. Must be called by all targets
		========================================================================
	-->
	<target name="init">

		<echo message="--------- ${project.fullname} ${project.version} ---------" />
		<echo message="" />

		<echo message="java.class.path = ${java.class.path}" />
		<echo message="" />
		<echo message="java.home = ${java.home}" />
		<echo message="user.home = ${user.home}" />

		<!-- Filters -->
		<filter token="fullprojectname" value="${project.fullname}" />
		<filter token="version" value="${project.version}" />
		<filter token="projectname" value="${project.name}" />
		<filter token="date" value="${DSTAMP}" />
	</target>
	
	<!--
		========================================================================
		Remove all build generated files
		========================================================================
	-->
	<target name="clean" depends="init">
		<!-- Remove the out directory -->
		<delete dir="${out.dir}" />
	</target>

	<!--
		========================================================================
		Prepare the output directory by copying the source files into it
		========================================================================
	-->
	<target name="prepare" depends="clean">
	  <mkdir dir="${out.dist.dir}" />
		<mkdir dir="${out.src.java.dir}" />
		<mkdir dir="${out.test.java.dir}" />
		
		<!-- copy the java code and replace version strings -->
		<copy todir="${out.src.java.dir}" filtering="true">
			<fileset dir="${src.java.dir}">
				<patternset refid="ascii" />
			</fileset>
		</copy>
		<copy todir="${out.src.java.dir}" filtering="false">
			<fileset dir="${src.java.dir}">
				<patternset refid="binary" />
			</fileset>
		</copy>
		
		<!-- copy the test java code and replace version strings -->
		<copy todir="${out.test.java.dir}" filtering="true">
			<fileset dir="${test.java.dir}">
				<patternset refid="ascii" />
			</fileset>
		</copy>
		<copy todir="${out.test.java.dir}" filtering="false">
			<fileset dir="${test.java.dir}">
				<patternset refid="binary" />
			</fileset>
		</copy>
	</target>

	<!--
		========================================================================
		Compiles the source directory
		========================================================================
	-->
	<!-- Run the java compilation -->
	<target name="compile" depends="prepare">
		<mkdir dir="${out.classes.dir}" />
		<javac destdir="${out.classes.dir}"
		     source="${source}"
			   target="${source}"
			   debug="${debug}" 
			   deprecation="${deprecation}" 
			   optimize="${optimize}"
				includeantruntime = "false">
			<classpath refid="classpath" />
			<src path="${out.src.java.dir}" />
			<src path="${out.test.java.dir}" />
		</javac>
		<copy todir="${out.classes.dir}" filtering="false">
			<fileset dir="${out.src.java.dir}">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${out.test.java.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!--
		========================================================================
		Generate the javadoc
		========================================================================
	-->
	<target name="javadoc" depends="prepare">
		<mkdir dir="${out.javadoc.dir}" />
		<javadoc sourcepath="${out.src.java.dir}" 
				 destdir="${out.javadoc.dir}" 
				 author="true" 
				 version="true" 
				 use="true" 
				 access="private"
				 failonerror="true"
				 doctitle="${project.fullname} ${project.version}"
				 windowtitle="${project.fullname} ${project.version}">
			<classpath refid="classpath" />
		</javadoc>
		
		<zip destfile="${out.dist.dir}/${javadoc.zip}" basedir="${out.javadoc.dir}" />
	</target>
	
	<!--
		========================================================================
		Unpack the lib directory
		========================================================================
	-->
	<!-- Generate the jar file -->
	<target name="unpack" depends="prepare">
		<unjar dest="${out.classes.dir}">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</unjar>
	</target>
	
	<!--
		========================================================================
		Create the jar file
		========================================================================
	-->
	<!-- Generate the jar file -->
	<target name="jar" depends="compile,unpack">
		<mkdir dir="${out.manifest.dir}" />
	    <manifest file="${out.manifest.dir}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Title" value="${project.fullname}" />
			<attribute name="Version" value="${project.version}" />
			<attribute name="Date" value="${TODAY}" />
			<attribute name="Main-Class" value="${main.class}" />
	    </manifest>
	    <jar jarfile="${out.dist.dir}/${jar.name}" manifest="${out.manifest.dir}/MANIFEST.MF">
			<fileset dir="${out.classes.dir}" />
	    </jar>
	</target>
	
	<!--
		========================================================================
		Run regression tests
		========================================================================
	-->
	<target name="regressiontests" depends="compile">
		<junit printsummary="withOutAndErr" haltonerror="true" haltonfailure="true" fork="true" dir="${basedir}">
			<classpath refid="classpath" />
			<classpath path="${out.classes.dir}" />
			<formatter type="brief" usefile="false" />
			<test name="${regression.class}" />
		</junit>
	</target>
	
	<target name="deploy" depends="regressiontests,jar,javadoc" />
</project>
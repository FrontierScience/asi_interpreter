/**
Copyright 2017 Frontier Science & Technology Research Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

ADDITIONAL DISCLAIMER:
In addition to the standard warranty exclusions and limitations of
liability set forth in sections 7, 8 and 9 of the Apache 2.0 license
that governs the use and development of this software, Frontier Science
& Technology Research Foundation disclaims any liability for use of
this software for patient care or in clinical settings. This software
was developed solely for use in medical and public health research, and
was not intended, designed, or validated to guide patient care.
*/

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.fstrf.stanfordAsiInterpreter.resistance.grammar.parser;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.fstrf.stanfordAsiInterpreter.resistance.grammar.analysis.Analysis;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.analysis.AnalysisAdapter;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.lexer.Lexer;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.lexer.LexerException;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AAndLogicsymbol;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AAtleastSelectstatement2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AAtleastnotmorethanSelectstatement2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ABooleancondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ACondition2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AExactlySelectstatement2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AExcludeCondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AExcludestatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AFloatNumber;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AIntegerNumber;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AListitems;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ALogicstatementStatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AMaxScoreitem;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ANotmorethanSelectstatement2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AOrLogicsymbol;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AResidueCondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AResidueResidue;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AResidueinvertResidue;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AResiduenotResidue;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AScoreStatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AScorecondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AScoreitems;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AScorelist;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ASelectCondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ASelectlist;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.ASelectstatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AStatementCondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.AStatementScoreitem;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.EOF;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.NoCast;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PBooleancondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PCondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PCondition2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PExcludestatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PListitems;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PLogicsymbol;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PNumber;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PResidue;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PScorecondition;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PScoreitem;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PScoreitems;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PScorelist;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PSelectlist;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PSelectstatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PSelectstatement2;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.PStatement;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.Start;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.Switchable;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TAminoAcid;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TAnd;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TAtleast;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TComma;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TExactly;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TExclude;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TFloat;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TFrom;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TInteger;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TLPar;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TMapper;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TMax;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TMin;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TNot;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TNotmorethan;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TOr;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TRPar;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TScore;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TSelect;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.Token;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.TypedLinkedList;

public class Parser {
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<?> nodeList;

    private final Lexer lexer;
    private final ListIterator<State> stack = new LinkedList<State>().listIterator();
    // private int last_shift;
    private int last_pos;
    private int last_line;
    private Token<?> last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer) {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException {
    }

    private void push(int numstate, ArrayList<?> listNode, boolean hidden) throws ParserException, LexerException, IOException {
        this.nodeList = listNode;

        if (!hidden) {
            filter();
        }

        if (!stack.hasNext()) {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index) {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while (low <= high) {
            int middle = (low + high) / 2;

            if (state < gotoTable[index][middle][0]) {
                high = middle - 1;
            } else if (state > gotoTable[index][middle][0]) {
                low = middle + 1;
            } else {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state() {
        State s = stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList<?> pop() {
        return stack.previous().nodes;
    }

    private int index(Switchable token) {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException {
        push(0, null, true);
        List<Token<?>> ign = null;
        while (true) {
            while (index(lexer.peek()) == -1) {
                if (ign == null) {
                    ign = new TypedLinkedList<Token<?>>(NoCast.instance());
                }

                ign.add(lexer.next());
            }

            if (ign != null) {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while (low <= high) {
                int middle = (low + high) / 2;

                if (index < actionTable[state()][middle][0]) {
                    high = middle - 1;
                } else if (index > actionTable[state()][middle][0]) {
                    low = middle + 1;
                } else {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch (action[0]) {
                case SHIFT : {
                    ArrayList<Token<?>> list = new ArrayList<>();
                    list.add(lexer.next());
                    push(action[1], list, false);
                    // last_shift = action[1];
                }
                    break;
                case REDUCE :
                    switch (action[1]) {
                        case 0 : /* reduce ALogicstatementStatement */
                        {
                            ArrayList<ALogicstatementStatement> list = new0();
                            push(goTo(0), list, false);
                        }
                            break;
                        case 1 : /* reduce AScoreStatement */
                        {
                            ArrayList<AScoreStatement> list = new1();
                            push(goTo(0), list, false);
                        }
                            break;
                        case 2 : /*
                                  * reduce AAbooleancondition1Booleancondition
                                  */
                        {
                            ArrayList<ABooleancondition> list = new2();
                            push(goTo(1), list, false);
                        }
                            break;
                        case 3 : /*
                                  * reduce AAbooleancondition2Booleancondition
                                  */
                        {
                            ArrayList<ABooleancondition> list = new3();
                            push(goTo(1), list, false);
                        }
                            break;
                        case 4 : /* reduce AStatementCondition */
                        {
                            ArrayList<AStatementCondition> list = new4();
                            push(goTo(2), list, false);
                        }
                            break;
                        case 5 : /* reduce AResidueCondition */
                        {
                            ArrayList<AResidueCondition> list = new5();
                            push(goTo(2), list, false);
                        }
                            break;
                        case 6 : /* reduce AExcludeCondition */
                        {
                            ArrayList<AExcludeCondition> list = new6();
                            push(goTo(2), list, false);
                        }
                            break;
                        case 7 : /* reduce ASelectCondition */
                        {
                            ArrayList<ASelectCondition> list = new7();
                            push(goTo(2), list, false);
                        }
                            break;
                        case 8 : /* reduce ACondition2 */
                        {
                            ArrayList<ACondition2> list = new8();
                            push(goTo(3), list, false);
                        }
                            break;
                        case 9 : /* reduce AAndLogicsymbol */
                        {
                            ArrayList<AAndLogicsymbol> list = new9();
                            push(goTo(4), list, false);
                        }
                            break;
                        case 10 : /* reduce AOrLogicsymbol */
                        {
                            ArrayList<AOrLogicsymbol> list = new10();
                            push(goTo(4), list, false);
                        }
                            break;
                        case 11 : /* reduce AAresidueresidue1Residue */
                        {
                            ArrayList<AResidueResidue> list = new11();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 12 : /* reduce AAresidueresidue2Residue */
                        {
                            ArrayList<AResidueResidue> list = new12();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 13 : /* reduce AAresiduenotresidue1Residue */
                        {
                            ArrayList<AResiduenotResidue> list = new13();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 14 : /* reduce AAresiduenotresidue2Residue */
                        {
                            ArrayList<AResiduenotResidue> list = new14();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 15 : /* reduce AAresidueinvertresidue1Residue */
                        {
                            ArrayList<AResidueinvertResidue> list = new15();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 16 : /* reduce AAresidueinvertresidue2Residue */
                        {
                            ArrayList<AResidueinvertResidue> list = new16();
                            push(goTo(5), list, false);
                        }
                            break;
                        case 17 : /* reduce AExcludestatement */
                        {
                            ArrayList<AExcludestatement> list = new17();
                            push(goTo(6), list, false);
                        }
                            break;
                        case 18 : /* reduce ASelectstatement */
                        {
                            ArrayList<ASelectstatement> list = new18();
                            push(goTo(7), list, false);
                        }
                            break;
                        case 19 : /* reduce AExactlySelectstatement2 */
                        {
                            ArrayList<AExactlySelectstatement2> list = new19();
                            push(goTo(8), list, false);
                        }
                            break;
                        case 20 : /* reduce AAtleastSelectstatement2 */
                        {
                            ArrayList<AAtleastSelectstatement2> list = new20();
                            push(goTo(8), list, false);
                        }
                            break;
                        case 21 : /* reduce ANotmorethanSelectstatement2 */
                        {
                            ArrayList<ANotmorethanSelectstatement2> list = new21();
                            push(goTo(8), list, false);
                        }
                            break;
                        case 22 : /*
                                   * reduce AAtleastnotmorethanSelectstatement2
                                   */
                        {
                            ArrayList<AAtleastnotmorethanSelectstatement2> list = new22();
                            push(goTo(8), list, false);
                        }
                            break;
                        case 23 : /* reduce AAselectlist1Selectlist */
                        {
                            ArrayList<ASelectlist> list = new23();
                            push(goTo(9), list, false);
                        }
                            break;
                        case 24 : /* reduce AAselectlist2Selectlist */
                        {
                            ArrayList<ASelectlist> list = new24();
                            push(goTo(9), list, false);
                        }
                            break;
                        case 25 : /* reduce AListitems */
                        {
                            ArrayList<AListitems> list = new25();
                            push(goTo(10), list, false);
                        }
                            break;
                        case 26 : /* reduce AScorecondition */
                        {
                            ArrayList<AScorecondition> list = new26();
                            push(goTo(11), list, false);
                        }
                            break;
                        case 27 : /* reduce AAscorelist1Scorelist */
                        {
                            ArrayList<AScorelist> list = new27();
                            push(goTo(12), list, false);
                        }
                            break;
                        case 28 : /* reduce AAscorelist2Scorelist */
                        {
                            ArrayList<AScorelist> list = new28();
                            push(goTo(12), list, false);
                        }
                            break;
                        case 29 : /* reduce AAstatementscoreitem1Scoreitem */
                        {
                            ArrayList<AStatementScoreitem> list = new29();
                            push(goTo(13), list, false);
                        }
                            break;
                        case 30 : /* reduce AAstatementscoreitem2Scoreitem */
                        {
                            ArrayList<AStatementScoreitem> list = new30();
                            push(goTo(13), list, false);
                        }
                            break;
                        case 31 : /* reduce AMaxScoreitem */
                        {
                            ArrayList<AMaxScoreitem> list = new31();
                            push(goTo(13), list, false);
                        }
                            break;
                        case 32 : /* reduce AScoreitems */
                        {
                            ArrayList<AScoreitems> list = new32();
                            push(goTo(14), list, false);
                        }
                            break;
                        case 33 : /* reduce AIntegerNumber */
                        {
                            ArrayList<AIntegerNumber> list = new33();
                            push(goTo(15), list, false);
                        }
                            break;
                        case 34 : /* reduce AFloatNumber */
                        {
                            ArrayList<AFloatNumber> list = new34();
                            push(goTo(15), list, false);
                        }
                            break;
                        case 35 : /* reduce ATerminal$Condition2 */
                        {
                            ArrayList<TypedLinkedList<PCondition2<?>>> list = new35();
                            push(goTo(16), list, true);
                        }
                            break;
                        case 36 : /* reduce ANonTerminal$Condition2 */
                        {
                            ArrayList<TypedLinkedList<PCondition2<?>>> list = new36();
                            push(goTo(16), list, true);
                        }
                            break;
                        case 37 : /* reduce ATerminal$AminoAcid */
                        {
                            ArrayList<TypedLinkedList<TAminoAcid>> list = new37();
                            push(goTo(17), list, true);
                        }
                            break;
                        case 38 : /* reduce ANonTerminal$AminoAcid */
                        {
                            ArrayList<TypedLinkedList<TAminoAcid>> list = new38();
                            push(goTo(17), list, true);
                        }
                            break;
                        case 39 : /* reduce ATerminal$Listitems */
                        {
                            ArrayList<TypedLinkedList<PListitems<?>>> list = new39();
                            push(goTo(18), list, true);
                        }
                            break;
                        case 40 : /* reduce ANonTerminal$Listitems */
                        {
                            ArrayList<TypedLinkedList<PListitems<?>>> list = new40();
                            push(goTo(18), list, true);
                        }
                            break;
                        case 41 : /* reduce ATerminal$Scoreitems */
                        {
                            ArrayList<TypedLinkedList<PScoreitems<?>>> list = new41();
                            push(goTo(19), list, true);
                        }
                            break;
                        case 42 : /* reduce ANonTerminal$Scoreitems */
                        {
                            ArrayList<TypedLinkedList<PScoreitems<?>>> list = new42();
                            push(goTo(19), list, true);
                        }
                            break;
                    }
                    break;
                case ACCEPT : {
                    EOF node2 = (EOF) lexer.next();
                    PStatement<?> node1 = (PStatement<?>) pop().get(0);
                    Start node = new Start(node1, node2);
                    return node;
                }
                case ERROR :
                    throw new ParserException(last_token, "[" + last_line + "," + last_pos + "] " + errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList<ALogicstatementStatement> new0() /*
                                                * reduce
                                                * ALogicstatementStatement
                                                */
    {
        ArrayList<ALogicstatementStatement> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        ALogicstatementStatement pstatementNode1;
        {
            PBooleancondition<?> pbooleanconditionNode2;
            pbooleanconditionNode2 = (PBooleancondition<?>) nodeArrayList1.get(0);

            pstatementNode1 = new ALogicstatementStatement(pbooleanconditionNode2);
        }
        nodeList.add(pstatementNode1);
        return nodeList;
    }

    ArrayList<AScoreStatement> new1() /* reduce AScoreStatement */
    {
        ArrayList<AScoreStatement> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AScoreStatement pstatementNode1;
        {
            PScorecondition<?> pscoreconditionNode2;
            pscoreconditionNode2 = (PScorecondition<?>) nodeArrayList1.get(0);

            pstatementNode1 = new AScoreStatement(pscoreconditionNode2);
        }
        nodeList.add(pstatementNode1);
        return nodeList;
    }

    ArrayList<ABooleancondition> new2() /*
                                         * reduce
                                         * AAbooleancondition1Booleancondition
                                         */
    {
        ArrayList<ABooleancondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        ABooleancondition pbooleanconditionNode1;
        {
            PCondition<?> pconditionNode2;
            TypedLinkedList<PCondition2<?>> listNode3 = new TypedLinkedList<PCondition2<?>>();
            pconditionNode2 = (PCondition<?>) nodeArrayList1.get(0);
            {
            }

            pbooleanconditionNode1 = new ABooleancondition(pconditionNode2, listNode3);
        }
        nodeList.add(pbooleanconditionNode1);
        return nodeList;
    }

    ArrayList<ABooleancondition> new3() /*
                                         * reduce
                                         * AAbooleancondition2Booleancondition
                                         */
    {
        ArrayList<ABooleancondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        ABooleancondition pbooleanconditionNode1;
        {
            PCondition<?> pconditionNode2;
            TypedLinkedList<PCondition2<?>> listNode4 = new TypedLinkedList<PCondition2<?>>();
            pconditionNode2 = (PCondition<?>) nodeArrayList1.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<PCondition2<?>> listNode3 = (TypedLinkedList<PCondition2<?>>) nodeArrayList2.get(0);
                if (listNode3 != null) {
                    listNode4.addAll(listNode3);
                }
            }

            pbooleanconditionNode1 = new ABooleancondition(pconditionNode2, listNode4);
        }
        nodeList.add(pbooleanconditionNode1);
        return nodeList;
    }

    ArrayList<AStatementCondition> new4() /* reduce AStatementCondition */
    {
        ArrayList<AStatementCondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AStatementCondition pconditionNode1;
        {
            TLPar tlparNode2;
            PBooleancondition<?> pbooleanconditionNode3;
            TRPar trparNode4;
            tlparNode2 = (TLPar) nodeArrayList1.get(0);
            pbooleanconditionNode3 = (PBooleancondition<?>) nodeArrayList2.get(0);
            trparNode4 = (TRPar) nodeArrayList3.get(0);

            pconditionNode1 = new AStatementCondition(tlparNode2, pbooleanconditionNode3, trparNode4);
        }
        nodeList.add(pconditionNode1);
        return nodeList;
    }

    ArrayList<AResidueCondition> new5() /* reduce AResidueCondition */
    {
        ArrayList<AResidueCondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AResidueCondition pconditionNode1;
        {
            PResidue<?> presidueNode2;
            presidueNode2 = (PResidue<?>) nodeArrayList1.get(0);

            pconditionNode1 = new AResidueCondition(presidueNode2);
        }
        nodeList.add(pconditionNode1);
        return nodeList;
    }

    ArrayList<AExcludeCondition> new6() /* reduce AExcludeCondition */
    {
        ArrayList<AExcludeCondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AExcludeCondition pconditionNode1;
        {
            PExcludestatement<?> pexcludestatementNode2;
            pexcludestatementNode2 = (PExcludestatement<?>) nodeArrayList1.get(0);

            pconditionNode1 = new AExcludeCondition(pexcludestatementNode2);
        }
        nodeList.add(pconditionNode1);
        return nodeList;
    }

    ArrayList<ASelectCondition> new7() /* reduce ASelectCondition */
    {
        ArrayList<ASelectCondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        ASelectCondition pconditionNode1;
        {
            PSelectstatement<?> pselectstatementNode2;
            pselectstatementNode2 = (PSelectstatement<?>) nodeArrayList1.get(0);

            pconditionNode1 = new ASelectCondition(pselectstatementNode2);
        }
        nodeList.add(pconditionNode1);
        return nodeList;
    }

    ArrayList<ACondition2> new8() /* reduce ACondition2 */
    {
        ArrayList<ACondition2> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        ACondition2 pcondition2Node1;
        {
            PLogicsymbol<?> plogicsymbolNode2;
            PCondition<?> pconditionNode3;
            plogicsymbolNode2 = (PLogicsymbol<?>) nodeArrayList1.get(0);
            pconditionNode3 = (PCondition<?>) nodeArrayList2.get(0);

            pcondition2Node1 = new ACondition2(plogicsymbolNode2, pconditionNode3);
        }
        nodeList.add(pcondition2Node1);
        return nodeList;
    }

    ArrayList<AAndLogicsymbol> new9() /* reduce AAndLogicsymbol */
    {
        ArrayList<AAndLogicsymbol> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AAndLogicsymbol plogicsymbolNode1;
        {
            TAnd tandNode2;
            tandNode2 = (TAnd) nodeArrayList1.get(0);

            plogicsymbolNode1 = new AAndLogicsymbol(tandNode2);
        }
        nodeList.add(plogicsymbolNode1);
        return nodeList;
    }

    ArrayList<AOrLogicsymbol> new10() /* reduce AOrLogicsymbol */
    {
        ArrayList<AOrLogicsymbol> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AOrLogicsymbol plogicsymbolNode1;
        {
            TOr torNode2;
            torNode2 = (TOr) nodeArrayList1.get(0);

            plogicsymbolNode1 = new AOrLogicsymbol(torNode2);
        }
        nodeList.add(plogicsymbolNode1);
        return nodeList;
    }

    ArrayList<AResidueResidue> new11() /* reduce AAresidueresidue1Residue */
    {
        ArrayList<AResidueResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResidueResidue presidueNode1;
        {
            // Object nullNode2 = null;
            TInteger tintegerNode3;
            TypedLinkedList<TAminoAcid> listNode5 = new TypedLinkedList<TAminoAcid>();
            tintegerNode3 = (TInteger) nodeArrayList1.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode4 = (TypedLinkedList<TAminoAcid>) nodeArrayList2.get(0);
                if (listNode4 != null) {
                    listNode5.addAll(listNode4);
                }
            }

            presidueNode1 = new AResidueResidue(null, tintegerNode3, listNode5);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AResidueResidue> new12() /* reduce AAresidueresidue2Residue */
    {
        ArrayList<AResidueResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResidueResidue presidueNode1;
        {
            TAminoAcid taminoacidNode2;
            TInteger tintegerNode3;
            TypedLinkedList<TAminoAcid> listNode5 = new TypedLinkedList<TAminoAcid>();
            taminoacidNode2 = (TAminoAcid) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode4 = (TypedLinkedList<TAminoAcid>) nodeArrayList3.get(0);
                if (listNode4 != null) {
                    listNode5.addAll(listNode4);
                }
            }

            presidueNode1 = new AResidueResidue(taminoacidNode2, tintegerNode3, listNode5);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AResiduenotResidue> new13() /*
                                           * reduce AAresiduenotresidue1Residue
                                           */
    {
        ArrayList<AResiduenotResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResiduenotResidue presidueNode1;
        {
            TNot tnotNode2;
            // Object nullNode3 = null;
            TInteger tintegerNode4;
            TypedLinkedList<TAminoAcid> listNode6 = new TypedLinkedList<TAminoAcid>();
            tnotNode2 = (TNot) nodeArrayList1.get(0);
            tintegerNode4 = (TInteger) nodeArrayList2.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode5 = (TypedLinkedList<TAminoAcid>) nodeArrayList3.get(0);
                if (listNode5 != null) {
                    listNode6.addAll(listNode5);
                }
            }

            presidueNode1 = new AResiduenotResidue(tnotNode2, null, tintegerNode4, listNode6);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AResiduenotResidue> new14() /*
                                           * reduce AAresiduenotresidue2Residue
                                           */
    {
        ArrayList<AResiduenotResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResiduenotResidue presidueNode1;
        {
            TNot tnotNode2;
            TAminoAcid taminoacidNode3;
            TInteger tintegerNode4;
            TypedLinkedList<TAminoAcid> listNode6 = new TypedLinkedList<TAminoAcid>();
            tnotNode2 = (TNot) nodeArrayList1.get(0);
            taminoacidNode3 = (TAminoAcid) nodeArrayList2.get(0);
            tintegerNode4 = (TInteger) nodeArrayList3.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode5 = (TypedLinkedList<TAminoAcid>) nodeArrayList4.get(0);
                if (listNode5 != null) {
                    listNode6.addAll(listNode5);
                }
            }

            presidueNode1 = new AResiduenotResidue(tnotNode2, taminoacidNode3, tintegerNode4, listNode6);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AResidueinvertResidue> new15() /*
                                              * reduce
                                              * AAresidueinvertresidue1Residue
                                              */
    {
        ArrayList<AResidueinvertResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResidueinvertResidue presidueNode1;
        {
            // Object nullNode2 = null;
            TInteger tintegerNode3;
            TLPar tlparNode4;
            TNot tnotNode5;
            TypedLinkedList<TAminoAcid> listNode7 = new TypedLinkedList<TAminoAcid>();
            TRPar trparNode8;
            tintegerNode3 = (TInteger) nodeArrayList1.get(0);
            tlparNode4 = (TLPar) nodeArrayList2.get(0);
            tnotNode5 = (TNot) nodeArrayList3.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode6 = (TypedLinkedList<TAminoAcid>) nodeArrayList4.get(0);
                if (listNode6 != null) {
                    listNode7.addAll(listNode6);
                }
            }
            trparNode8 = (TRPar) nodeArrayList5.get(0);

            presidueNode1 = new AResidueinvertResidue(null, tintegerNode3, tlparNode4, tnotNode5, listNode7, trparNode8);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AResidueinvertResidue> new16() /*
                                              * reduce
                                              * AAresidueinvertresidue2Residue
                                              */
    {
        ArrayList<AResidueinvertResidue> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList6 = pop();
        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AResidueinvertResidue presidueNode1;
        {
            TAminoAcid taminoacidNode2;
            TInteger tintegerNode3;
            TLPar tlparNode4;
            TNot tnotNode5;
            TypedLinkedList<TAminoAcid> listNode7 = new TypedLinkedList<TAminoAcid>();
            TRPar trparNode8;
            taminoacidNode2 = (TAminoAcid) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            tlparNode4 = (TLPar) nodeArrayList3.get(0);
            tnotNode5 = (TNot) nodeArrayList4.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<TAminoAcid> listNode6 = (TypedLinkedList<TAminoAcid>) nodeArrayList5.get(0);
                if (listNode6 != null) {
                    listNode7.addAll(listNode6);
                }
            }
            trparNode8 = (TRPar) nodeArrayList6.get(0);

            presidueNode1 = new AResidueinvertResidue(taminoacidNode2, tintegerNode3, tlparNode4, tnotNode5, listNode7, trparNode8);
        }
        nodeList.add(presidueNode1);
        return nodeList;
    }

    ArrayList<AExcludestatement> new17() /* reduce AExcludestatement */
    {
        ArrayList<AExcludestatement> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AExcludestatement pexcludestatementNode1;
        {
            TExclude texcludeNode2;
            PResidue<?> presidueNode3;
            texcludeNode2 = (TExclude) nodeArrayList1.get(0);
            presidueNode3 = (PResidue<?>) nodeArrayList2.get(0);

            pexcludestatementNode1 = new AExcludestatement(texcludeNode2, presidueNode3);
        }
        nodeList.add(pexcludestatementNode1);
        return nodeList;
    }

    ArrayList<ASelectstatement> new18() /* reduce ASelectstatement */
    {
        ArrayList<ASelectstatement> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        ASelectstatement pselectstatementNode1;
        {
            TSelect tselectNode2;
            PSelectstatement2<?> pselectstatement2Node3;
            tselectNode2 = (TSelect) nodeArrayList1.get(0);
            pselectstatement2Node3 = (PSelectstatement2<?>) nodeArrayList2.get(0);

            pselectstatementNode1 = new ASelectstatement(tselectNode2, pselectstatement2Node3);
        }
        nodeList.add(pselectstatementNode1);
        return nodeList;
    }

    ArrayList<AExactlySelectstatement2> new19() /*
                                                 * reduce
                                                 * AExactlySelectstatement2
                                                 */
    {
        ArrayList<AExactlySelectstatement2> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList6 = pop();
        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AExactlySelectstatement2 pselectstatement2Node1;
        {
            TExactly texactlyNode2;
            TInteger tintegerNode3;
            TFrom tfromNode4;
            TLPar tlparNode5;
            PSelectlist<?> pselectlistNode6;
            TRPar trparNode7;
            texactlyNode2 = (TExactly) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            tfromNode4 = (TFrom) nodeArrayList3.get(0);
            tlparNode5 = (TLPar) nodeArrayList4.get(0);
            pselectlistNode6 = (PSelectlist<?>) nodeArrayList5.get(0);
            trparNode7 = (TRPar) nodeArrayList6.get(0);

            pselectstatement2Node1 = new AExactlySelectstatement2(texactlyNode2, tintegerNode3, tfromNode4, tlparNode5, pselectlistNode6, trparNode7);
        }
        nodeList.add(pselectstatement2Node1);
        return nodeList;
    }

    ArrayList<AAtleastSelectstatement2> new20() /*
                                                 * reduce
                                                 * AAtleastSelectstatement2
                                                 */
    {
        ArrayList<AAtleastSelectstatement2> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList6 = pop();
        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AAtleastSelectstatement2 pselectstatement2Node1;
        {
            TAtleast tatleastNode2;
            TInteger tintegerNode3;
            TFrom tfromNode4;
            TLPar tlparNode5;
            PSelectlist<?> pselectlistNode6;
            TRPar trparNode7;
            tatleastNode2 = (TAtleast) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            tfromNode4 = (TFrom) nodeArrayList3.get(0);
            tlparNode5 = (TLPar) nodeArrayList4.get(0);
            pselectlistNode6 = (PSelectlist<?>) nodeArrayList5.get(0);
            trparNode7 = (TRPar) nodeArrayList6.get(0);

            pselectstatement2Node1 = new AAtleastSelectstatement2(tatleastNode2, tintegerNode3, tfromNode4, tlparNode5, pselectlistNode6, trparNode7);
        }
        nodeList.add(pselectstatement2Node1);
        return nodeList;
    }

    ArrayList<ANotmorethanSelectstatement2> new21() /*
                                                     * reduce
                                                     * ANotmorethanSelectstatement2
                                                     */
    {
        ArrayList<ANotmorethanSelectstatement2> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList6 = pop();
        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        ANotmorethanSelectstatement2 pselectstatement2Node1;
        {
            TNotmorethan tnotmorethanNode2;
            TInteger tintegerNode3;
            TFrom tfromNode4;
            TLPar tlparNode5;
            PSelectlist<?> pselectlistNode6;
            TRPar trparNode7;
            tnotmorethanNode2 = (TNotmorethan) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            tfromNode4 = (TFrom) nodeArrayList3.get(0);
            tlparNode5 = (TLPar) nodeArrayList4.get(0);
            pselectlistNode6 = (PSelectlist<?>) nodeArrayList5.get(0);
            trparNode7 = (TRPar) nodeArrayList6.get(0);

            pselectstatement2Node1 = new ANotmorethanSelectstatement2(tnotmorethanNode2, tintegerNode3, tfromNode4, tlparNode5, pselectlistNode6, trparNode7);
        }
        nodeList.add(pselectstatement2Node1);
        return nodeList;
    }

    ArrayList<AAtleastnotmorethanSelectstatement2> new22() /*
                                                            * reduce
                                                            * AAtleastnotmorethanSelectstatement2
                                                            */
    {
        ArrayList<AAtleastnotmorethanSelectstatement2> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList9 = pop();
        ArrayList<?> nodeArrayList8 = pop();
        ArrayList<?> nodeArrayList7 = pop();
        ArrayList<?> nodeArrayList6 = pop();
        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AAtleastnotmorethanSelectstatement2 pselectstatement2Node1;
        {
            TAtleast tatleastNode2;
            TInteger tintegerNode3;
            PLogicsymbol<?> plogicsymbolNode4;
            TNotmorethan tnotmorethanNode5;
            TInteger tintegerNode6;
            TFrom tfromNode7;
            TLPar tlparNode8;
            PSelectlist<?> pselectlistNode9;
            TRPar trparNode10;
            tatleastNode2 = (TAtleast) nodeArrayList1.get(0);
            tintegerNode3 = (TInteger) nodeArrayList2.get(0);
            plogicsymbolNode4 = (PLogicsymbol<?>) nodeArrayList3.get(0);
            tnotmorethanNode5 = (TNotmorethan) nodeArrayList4.get(0);
            tintegerNode6 = (TInteger) nodeArrayList5.get(0);
            tfromNode7 = (TFrom) nodeArrayList6.get(0);
            tlparNode8 = (TLPar) nodeArrayList7.get(0);
            pselectlistNode9 = (PSelectlist<?>) nodeArrayList8.get(0);
            trparNode10 = (TRPar) nodeArrayList9.get(0);

            pselectstatement2Node1 = new AAtleastnotmorethanSelectstatement2(tatleastNode2, tintegerNode3, plogicsymbolNode4, tnotmorethanNode5, tintegerNode6,
                    tfromNode7, tlparNode8, pselectlistNode9, trparNode10);
        }
        nodeList.add(pselectstatement2Node1);
        return nodeList;
    }

    ArrayList<ASelectlist> new23() /* reduce AAselectlist1Selectlist */
    {
        ArrayList<ASelectlist> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        ASelectlist pselectlistNode1;
        {
            PResidue<?> presidueNode2;
            TypedLinkedList<PListitems<?>> listNode3 = new TypedLinkedList<PListitems<?>>();
            presidueNode2 = (PResidue<?>) nodeArrayList1.get(0);
            {
            }

            pselectlistNode1 = new ASelectlist(presidueNode2, listNode3);
        }
        nodeList.add(pselectlistNode1);
        return nodeList;
    }

    ArrayList<ASelectlist> new24() /* reduce AAselectlist2Selectlist */
    {
        ArrayList<ASelectlist> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        ASelectlist pselectlistNode1;
        {
            PResidue<?> presidueNode2;
            TypedLinkedList<PListitems<?>> listNode4 = new TypedLinkedList<PListitems<?>>();
            presidueNode2 = (PResidue<?>) nodeArrayList1.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<PListitems<?>> listNode3 = (TypedLinkedList<PListitems<?>>) nodeArrayList2.get(0);
                if (listNode3 != null) {
                    listNode4.addAll(listNode3);
                }
            }

            pselectlistNode1 = new ASelectlist(presidueNode2, listNode4);
        }
        nodeList.add(pselectlistNode1);
        return nodeList;
    }

    ArrayList<AListitems> new25() /* reduce AListitems */
    {
        ArrayList<AListitems> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AListitems plistitemsNode1;
        {
            TComma tcommaNode2;
            PResidue<?> presidueNode3;
            tcommaNode2 = (TComma) nodeArrayList1.get(0);
            presidueNode3 = (PResidue<?>) nodeArrayList2.get(0);

            plistitemsNode1 = new AListitems(tcommaNode2, presidueNode3);
        }
        nodeList.add(plistitemsNode1);
        return nodeList;
    }

    ArrayList<AScorecondition> new26() /* reduce AScorecondition */
    {
        ArrayList<AScorecondition> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList5 = pop();
        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AScorecondition pscoreconditionNode1;
        {
            TScore tscoreNode2;
            TFrom tfromNode3;
            TLPar tlparNode4;
            PScorelist<?> pscorelistNode5;
            TRPar trparNode6;
            tscoreNode2 = (TScore) nodeArrayList1.get(0);
            tfromNode3 = (TFrom) nodeArrayList2.get(0);
            tlparNode4 = (TLPar) nodeArrayList3.get(0);
            pscorelistNode5 = (PScorelist<?>) nodeArrayList4.get(0);
            trparNode6 = (TRPar) nodeArrayList5.get(0);

            pscoreconditionNode1 = new AScorecondition(tscoreNode2, tfromNode3, tlparNode4, pscorelistNode5, trparNode6);
        }
        nodeList.add(pscoreconditionNode1);
        return nodeList;
    }

    ArrayList<AScorelist> new27() /* reduce AAscorelist1Scorelist */
    {
        ArrayList<AScorelist> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AScorelist pscorelistNode1;
        {
            PScoreitem<?> pscoreitemNode2;
            TypedLinkedList<PScoreitems<?>> listNode3 = new TypedLinkedList<PScoreitems<?>>();
            pscoreitemNode2 = (PScoreitem<?>) nodeArrayList1.get(0);
            {
            }

            pscorelistNode1 = new AScorelist(pscoreitemNode2, listNode3);
        }
        nodeList.add(pscorelistNode1);
        return nodeList;
    }

    ArrayList<AScorelist> new28() /* reduce AAscorelist2Scorelist */
    {
        ArrayList<AScorelist> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AScorelist pscorelistNode1;
        {
            PScoreitem<?> pscoreitemNode2;
            TypedLinkedList<PScoreitems<?>> listNode4 = new TypedLinkedList<PScoreitems<?>>();
            pscoreitemNode2 = (PScoreitem<?>) nodeArrayList1.get(0);
            {
                @SuppressWarnings("unchecked")
                TypedLinkedList<PScoreitems<?>> listNode3 = (TypedLinkedList<PScoreitems<?>>) nodeArrayList2.get(0);
                if (listNode3 != null) {
                    listNode4.addAll(listNode3);
                }
            }

            pscorelistNode1 = new AScorelist(pscoreitemNode2, listNode4);
        }
        nodeList.add(pscorelistNode1);
        return nodeList;
    }

    ArrayList<AStatementScoreitem> new29() /*
                                            * reduce
                                            * AAstatementscoreitem1Scoreitem
                                            */
    {
        ArrayList<AStatementScoreitem> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AStatementScoreitem pscoreitemNode1;
        {
            PBooleancondition<?> pbooleanconditionNode2;
            TMapper tmapperNode3;
            // Object nullNode4 = null;
            PNumber<?> pnumberNode5;
            pbooleanconditionNode2 = (PBooleancondition<?>) nodeArrayList1.get(0);
            tmapperNode3 = (TMapper) nodeArrayList2.get(0);
            pnumberNode5 = (PNumber<?>) nodeArrayList3.get(0);

            pscoreitemNode1 = new AStatementScoreitem(pbooleanconditionNode2, tmapperNode3, null, pnumberNode5);
        }
        nodeList.add(pscoreitemNode1);
        return nodeList;
    }

    ArrayList<AStatementScoreitem> new30() /*
                                            * reduce
                                            * AAstatementscoreitem2Scoreitem
                                            */
    {
        ArrayList<AStatementScoreitem> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AStatementScoreitem pscoreitemNode1;
        {
            PBooleancondition<?> pbooleanconditionNode2;
            TMapper tmapperNode3;
            TMin tminNode4;
            PNumber<?> pnumberNode5;
            pbooleanconditionNode2 = (PBooleancondition<?>) nodeArrayList1.get(0);
            tmapperNode3 = (TMapper) nodeArrayList2.get(0);
            tminNode4 = (TMin) nodeArrayList3.get(0);
            pnumberNode5 = (PNumber<?>) nodeArrayList4.get(0);

            pscoreitemNode1 = new AStatementScoreitem(pbooleanconditionNode2, tmapperNode3, tminNode4, pnumberNode5);
        }
        nodeList.add(pscoreitemNode1);
        return nodeList;
    }

    ArrayList<AMaxScoreitem> new31() /* reduce AMaxScoreitem */
    {
        ArrayList<AMaxScoreitem> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList4 = pop();
        ArrayList<?> nodeArrayList3 = pop();
        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AMaxScoreitem pscoreitemNode1;
        {
            TMax tmaxNode2;
            TLPar tlparNode3;
            PScorelist<?> pscorelistNode4;
            TRPar trparNode5;
            tmaxNode2 = (TMax) nodeArrayList1.get(0);
            tlparNode3 = (TLPar) nodeArrayList2.get(0);
            pscorelistNode4 = (PScorelist<?>) nodeArrayList3.get(0);
            trparNode5 = (TRPar) nodeArrayList4.get(0);

            pscoreitemNode1 = new AMaxScoreitem(tmaxNode2, tlparNode3, pscorelistNode4, trparNode5);
        }
        nodeList.add(pscoreitemNode1);
        return nodeList;
    }

    ArrayList<AScoreitems> new32() /* reduce AScoreitems */
    {
        ArrayList<AScoreitems> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        AScoreitems pscoreitemsNode1;
        {
            TComma tcommaNode2;
            PScoreitem<?> pscoreitemNode3;
            tcommaNode2 = (TComma) nodeArrayList1.get(0);
            pscoreitemNode3 = (PScoreitem<?>) nodeArrayList2.get(0);

            pscoreitemsNode1 = new AScoreitems(tcommaNode2, pscoreitemNode3);
        }
        nodeList.add(pscoreitemsNode1);
        return nodeList;
    }

    ArrayList<AIntegerNumber> new33() /* reduce AIntegerNumber */
    {
        ArrayList<AIntegerNumber> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AIntegerNumber pnumberNode1;
        {
            TInteger tintegerNode2;
            tintegerNode2 = (TInteger) nodeArrayList1.get(0);

            pnumberNode1 = new AIntegerNumber(tintegerNode2);
        }
        nodeList.add(pnumberNode1);
        return nodeList;
    }

    ArrayList<AFloatNumber> new34() /* reduce AFloatNumber */
    {
        ArrayList<AFloatNumber> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        AFloatNumber pnumberNode1;
        {
            TFloat tfloatNode2;
            tfloatNode2 = (TFloat) nodeArrayList1.get(0);

            pnumberNode1 = new AFloatNumber(tfloatNode2);
        }
        nodeList.add(pnumberNode1);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PCondition2<?>>> new35() /*
                                                        * reduce
                                                        * ATerminal$Condition2
                                                        */
    {
        ArrayList<TypedLinkedList<PCondition2<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PCondition2<?>> listNode2 = new TypedLinkedList<PCondition2<?>>();
        {
            PCondition2<?> pcondition2Node1;
            pcondition2Node1 = (PCondition2<?>) nodeArrayList1.get(0);
            if (pcondition2Node1 != null) {
                listNode2.add(pcondition2Node1);
            }
        }
        nodeList.add(listNode2);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PCondition2<?>>> new36() /*
                                                        * reduce
                                                        * ANonTerminal$Condition2
                                                        */
    {
        ArrayList<TypedLinkedList<PCondition2<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PCondition2<?>> listNode3 = new TypedLinkedList<PCondition2<?>>();
        {
            @SuppressWarnings("unchecked")
            TypedLinkedList<PCondition2<?>> listNode1 = (TypedLinkedList<PCondition2<?>>) nodeArrayList1.get(0);
            PCondition2<?> pcondition2Node2 = (PCondition2<?>) nodeArrayList2.get(0);
            if (listNode1 != null) {
                listNode3.addAll(listNode1);
            }
            if (pcondition2Node2 != null) {
                listNode3.add(pcondition2Node2);
            }
        }
        nodeList.add(listNode3);
        return nodeList;
    }

    ArrayList<TypedLinkedList<TAminoAcid>> new37() /*
                                                    * reduce ATerminal$AminoAcid
                                                    */
    {
        ArrayList<TypedLinkedList<TAminoAcid>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<TAminoAcid> listNode2 = new TypedLinkedList<TAminoAcid>();
        {
            TAminoAcid taminoacidNode1;
            taminoacidNode1 = (TAminoAcid) nodeArrayList1.get(0);
            if (taminoacidNode1 != null) {
                listNode2.add(taminoacidNode1);
            }
        }
        nodeList.add(listNode2);
        return nodeList;
    }

    ArrayList<TypedLinkedList<TAminoAcid>> new38() /*
                                                    * reduce
                                                    * ANonTerminal$AminoAcid
                                                    */
    {
        ArrayList<TypedLinkedList<TAminoAcid>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<TAminoAcid> listNode3 = new TypedLinkedList<TAminoAcid>();
        {
            @SuppressWarnings("unchecked")
            TypedLinkedList<TAminoAcid> listNode1 = (TypedLinkedList<TAminoAcid>) nodeArrayList1.get(0);
            TAminoAcid taminoacidNode2 = (TAminoAcid) nodeArrayList2.get(0);
            if (listNode1 != null) {
                listNode3.addAll(listNode1);
            }
            if (taminoacidNode2 != null) {
                listNode3.add(taminoacidNode2);
            }
        }
        nodeList.add(listNode3);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PListitems<?>>> new39() /*
                                                       * reduce
                                                       * ATerminal$Listitems
                                                       */
    {
        ArrayList<TypedLinkedList<PListitems<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PListitems<?>> listNode2 = new TypedLinkedList<PListitems<?>>();
        {
            PListitems<?> plistitemsNode1;
            plistitemsNode1 = (PListitems<?>) nodeArrayList1.get(0);
            if (plistitemsNode1 != null) {
                listNode2.add(plistitemsNode1);
            }
        }
        nodeList.add(listNode2);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PListitems<?>>> new40() /*
                                                       * reduce
                                                       * ANonTerminal$Listitems
                                                       */
    {
        ArrayList<TypedLinkedList<PListitems<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PListitems<?>> listNode3 = new TypedLinkedList<PListitems<?>>();
        {
            @SuppressWarnings("unchecked")
            TypedLinkedList<PListitems<?>> listNode1 = (TypedLinkedList<PListitems<?>>) nodeArrayList1.get(0);
            PListitems<?> plistitemsNode2 = (PListitems<?>) nodeArrayList2.get(0);
            if (listNode1 != null) {
                listNode3.addAll(listNode1);
            }
            if (plistitemsNode2 != null) {
                listNode3.add(plistitemsNode2);
            }
        }
        nodeList.add(listNode3);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PScoreitems<?>>> new41() /*
                                                        * reduce
                                                        * ATerminal$Scoreitems
                                                        */
    {
        ArrayList<TypedLinkedList<PScoreitems<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PScoreitems<?>> listNode2 = new TypedLinkedList<PScoreitems<?>>();
        {
            PScoreitems<?> pscoreitemsNode1;
            pscoreitemsNode1 = (PScoreitems<?>) nodeArrayList1.get(0);
            if (pscoreitemsNode1 != null) {
                listNode2.add(pscoreitemsNode1);
            }
        }
        nodeList.add(listNode2);
        return nodeList;
    }

    ArrayList<TypedLinkedList<PScoreitems<?>>> new42() /*
                                                        * reduce
                                                        * ANonTerminal$Scoreitems
                                                        */
    {
        ArrayList<TypedLinkedList<PScoreitems<?>>> nodeList = new ArrayList<>();

        ArrayList<?> nodeArrayList2 = pop();
        ArrayList<?> nodeArrayList1 = pop();
        TypedLinkedList<PScoreitems<?>> listNode3 = new TypedLinkedList<PScoreitems<?>>();
        {
            @SuppressWarnings("unchecked")
            TypedLinkedList<PScoreitems<?>> listNode1 = (TypedLinkedList<PScoreitems<?>>) nodeArrayList1.get(0);
            PScoreitems<?> pscoreitemsNode2 = (PScoreitems<?>) nodeArrayList2.get(0);
            if (listNode1 != null) {
                listNode3.addAll(listNode1);
            }
            if (pscoreitemsNode2 != null) {
                listNode3.add(pscoreitemsNode2);
            }
        }
        nodeList.add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable;
    /*
     * { {{-1, ERROR, 0}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {10,
     * SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1,
     * ERROR, 1}, {16, SHIFT, 15}, {18, SHIFT, 16}, }, {{-1, ERROR, 2}, {3,
     * SHIFT, 1}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 3}, {7, SHIFT,
     * 18}, {8, SHIFT, 19}, {9, SHIFT, 20}, }, {{-1, ERROR, 4}, {6, SHIFT, 22},
     * }, {{-1, ERROR, 5}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {12,
     * SHIFT, 5}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 6}, {12,
     * SHIFT, 24}, {18, SHIFT, 25}, }, {{-1, ERROR, 7}, {16, SHIFT, 27}, },
     * {{-1, ERROR, 8}, {19, ACCEPT, -1}, }, {{-1, REDUCE, 0}, }, {{-1, REDUCE,
     * 2}, {1, SHIFT, 28}, {2, SHIFT, 29}, }, {{-1, REDUCE, 5}, }, {{-1, REDUCE,
     * 6}, }, {{-1, REDUCE, 7}, }, {{-1, REDUCE, 1}, }, {{-1, ERROR, 15}, {18,
     * SHIFT, 25}, }, {{-1, ERROR, 16}, {16, SHIFT, 34}, }, {{-1, REDUCE, 17},
     * }, {{-1, ERROR, 18}, {16, SHIFT, 35}, }, {{-1, ERROR, 19}, {16, SHIFT,
     * 36}, }, {{-1, ERROR, 20}, {16, SHIFT, 37}, }, {{-1, REDUCE, 18}, }, {{-1,
     * ERROR, 22}, {12, SHIFT, 38}, }, {{-1, ERROR, 23}, {13, SHIFT, 39}, },
     * {{-1, ERROR, 24}, {3, SHIFT, 40}, }, {{-1, REDUCE, 37}, }, {{-1, REDUCE,
     * 11}, {18, SHIFT, 41}, }, {{-1, ERROR, 27}, {12, SHIFT, 42}, {18, SHIFT,
     * 25}, }, {{-1, REDUCE, 9}, }, {{-1, REDUCE, 10}, }, {{-1, REDUCE, 35}, },
     * {{-1, ERROR, 31}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {12,
     * SHIFT, 5}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, REDUCE, 3}, {1,
     * SHIFT, 28}, {2, SHIFT, 29}, }, {{-1, REDUCE, 13}, {18, SHIFT, 41}, },
     * {{-1, ERROR, 34}, {18, SHIFT, 25}, }, {{-1, ERROR, 35}, {1, SHIFT, 28},
     * {2, SHIFT, 29}, {6, SHIFT, 47}, }, {{-1, ERROR, 36}, {6, SHIFT, 49}, },
     * {{-1, ERROR, 37}, {6, SHIFT, 50}, }, {{-1, ERROR, 38}, {3, SHIFT, 1}, {4,
     * SHIFT, 2}, {5, SHIFT, 3}, {11, SHIFT, 51}, {12, SHIFT, 5}, {16, SHIFT,
     * 6}, {18, SHIFT, 7}, }, {{-1, REDUCE, 4}, }, {{-1, ERROR, 40}, {18, SHIFT,
     * 25}, }, {{-1, REDUCE, 38}, }, {{-1, ERROR, 42}, {3, SHIFT, 56}, }, {{-1,
     * REDUCE, 12}, {18, SHIFT, 41}, }, {{-1, REDUCE, 8}, }, {{-1, REDUCE, 36},
     * }, {{-1, REDUCE, 14}, {18, SHIFT, 41}, }, {{-1, ERROR, 47}, {12, SHIFT,
     * 57}, }, {{-1, ERROR, 48}, {9, SHIFT, 58}, }, {{-1, ERROR, 49}, {12,
     * SHIFT, 59}, }, {{-1, ERROR, 50}, {12, SHIFT, 60}, }, {{-1, ERROR, 51},
     * {12, SHIFT, 61}, }, {{-1, ERROR, 52}, {14, SHIFT, 62}, }, {{-1, ERROR,
     * 53}, {13, SHIFT, 63}, }, {{-1, REDUCE, 27}, {15, SHIFT, 64}, }, {{-1,
     * ERROR, 55}, {13, SHIFT, 67}, {18, SHIFT, 41}, }, {{-1, ERROR, 56}, {18,
     * SHIFT, 25}, }, {{-1, ERROR, 57}, {3, SHIFT, 1}, {16, SHIFT, 6}, {18,
     * SHIFT, 7}, }, {{-1, ERROR, 58}, {16, SHIFT, 71}, }, {{-1, ERROR, 59}, {3,
     * SHIFT, 1}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 60}, {3,
     * SHIFT, 1}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 61}, {3,
     * SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {11, SHIFT, 51}, {12, SHIFT, 5},
     * {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 62}, {0, SHIFT, 75}, {16,
     * SHIFT, 76}, {17, SHIFT, 77}, }, {{-1, REDUCE, 26}, }, {{-1, ERROR, 64},
     * {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {11, SHIFT, 51}, {12, SHIFT,
     * 5}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, REDUCE, 41}, }, {{-1,
     * REDUCE, 28}, {15, SHIFT, 64}, }, {{-1, REDUCE, 15}, }, {{-1, ERROR, 68},
     * {13, SHIFT, 81}, {18, SHIFT, 41}, }, {{-1, REDUCE, 23}, {15, SHIFT, 82},
     * }, {{-1, ERROR, 70}, {13, SHIFT, 85}, }, {{-1, ERROR, 71}, {6, SHIFT,
     * 86}, }, {{-1, ERROR, 72}, {13, SHIFT, 87}, }, {{-1, ERROR, 73}, {13,
     * SHIFT, 88}, }, {{-1, ERROR, 74}, {13, SHIFT, 89}, }, {{-1, ERROR, 75},
     * {16, SHIFT, 76}, {17, SHIFT, 77}, }, {{-1, REDUCE, 33}, }, {{-1, REDUCE,
     * 34}, }, {{-1, REDUCE, 29}, }, {{-1, REDUCE, 32}, }, {{-1, REDUCE, 42}, },
     * {{-1, REDUCE, 16}, }, {{-1, ERROR, 82}, {3, SHIFT, 1}, {16, SHIFT, 6},
     * {18, SHIFT, 7}, }, {{-1, REDUCE, 39}, }, {{-1, REDUCE, 24}, {15, SHIFT,
     * 82}, }, {{-1, REDUCE, 20}, }, {{-1, ERROR, 86}, {12, SHIFT, 93}, }, {{-1,
     * REDUCE, 19}, }, {{-1, REDUCE, 21}, }, {{-1, REDUCE, 31}, }, {{-1, REDUCE,
     * 30}, }, {{-1, REDUCE, 25}, }, {{-1, REDUCE, 40}, }, {{-1, ERROR, 93}, {3,
     * SHIFT, 1}, {16, SHIFT, 6}, {18, SHIFT, 7}, }, {{-1, ERROR, 94}, {13,
     * SHIFT, 95}, }, {{-1, REDUCE, 22}, }, };
     */
    private static int[][][] gotoTable;
    /*
     * { {{-1, 8}, }, {{-1, 52}, {0, 9}, {5, 23}, }, {{-1, 10}, {31, 44}, },
     * {{-1, 30}, {32, 45}, }, {{-1, 31}, {35, 48}, }, {{-1, 11}, {2, 17}, {57,
     * 69}, {59, 69}, {60, 69}, {82, 91}, {93, 69}, }, {{-1, 12}, }, {{-1, 13},
     * }, {{-1, 21}, }, {{-1, 70}, {59, 72}, {60, 73}, {93, 94}, }, {{-1, 83},
     * {84, 92}, }, {{-1, 14}, }, {{-1, 53}, {61, 74}, }, {{-1, 54}, {64, 79},
     * }, {{-1, 65}, {66, 80}, }, {{-1, 78}, {75, 90}, }, {{-1, 32}, }, {{-1,
     * 26}, {15, 33}, {27, 43}, {34, 46}, {40, 55}, {56, 68}, }, {{-1, 84}, },
     * {{-1, 66}, }, };
     */
    private static String[] errorMessages;
    /*
     * {
     * "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'SCORE', '(', integer, amino acid"
     * , "expecting: integer, amino acid",
     * "expecting: 'NOT', integer, amino acid",
     * "expecting: 'ATLEAST', 'EXACTLY', 'NOTMORETHAN'", "expecting: 'FROM'",
     * "expecting: 'NOT', 'EXCLUDE', 'SELECT', '(', integer, amino acid",
     * "expecting: '(', amino acid", "expecting: integer", "expecting: EOF",
     * "expecting: 'AND', 'OR', ')', '=>', EOF", "expecting: amino acid",
     * "expecting: '('", "expecting: ')'", "expecting: 'NOT'",
     * "expecting: 'AND', 'OR', ')', '=>', ',', amino acid, EOF",
     * "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'NOTMORETHAN', '(', integer, amino acid"
     * , "expecting: 'AND', 'OR', 'FROM'",
     * "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'MAX', '(', integer, amino acid",
     * "expecting: 'NOTMORETHAN'", "expecting: '=>'", "expecting: ')', ','",
     * "expecting: ')', amino acid", "expecting: '-', integer, float",
     * "expecting: 'AND', 'OR', ')', '=>', ',', EOF",
     * "expecting: integer, float", };
     */
    private static int[] errors;
    /*
     * { 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9, 8, 10, 7, 9, 7, 7, 7, 9, 11,
     * 12, 13, 14, 14, 6, 15, 15, 9, 5, 9, 14, 10, 16, 4, 4, 17, 9, 10, 14, 13,
     * 14, 9, 9, 14, 11, 18, 11, 11, 11, 19, 12, 20, 21, 10, 2, 7, 2, 2, 17, 22,
     * 8, 17, 20, 20, 23, 21, 20, 12, 4, 12, 12, 12, 24, 20, 20, 20, 20, 20, 23,
     * 2, 20, 20, 9, 11, 9, 9, 20, 20, 20, 20, 2, 12, 9, };
     */

    static {
        try {
            DataInputStream s = new DataInputStream(new BufferedInputStream(Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            actionTable = new int[length][][];
            for (int i = 0; i < actionTable.length; i++) {
                length = s.readInt();
                actionTable[i] = new int[length][3];
                for (int j = 0; j < actionTable[i].length; j++) {
                    for (int k = 0; k < 3; k++) {
                        actionTable[i][j][k] = s.readInt();
                    }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for (int i = 0; i < gotoTable.length; i++) {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for (int j = 0; j < gotoTable[i].length; j++) {
                    for (int k = 0; k < 2; k++) {
                        gotoTable[i][j][k] = s.readInt();
                    }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for (int i = 0; i < errorMessages.length; i++) {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for (int j = 0; j < length; j++) {
                    buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for (int i = 0; i < errors.length; i++) {
                errors[i] = s.readInt();
            }

            s.close();
        } catch (Exception e) {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

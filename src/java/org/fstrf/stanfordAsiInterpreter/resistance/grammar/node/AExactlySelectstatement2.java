/**
Copyright 2017 Frontier Science & Technology Research Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

ADDITIONAL DISCLAIMER:
In addition to the standard warranty exclusions and limitations of 
liability set forth in sections 7, 8 and 9 of the Apache 2.0 license 
that governs the use and development of this software, Frontier Science 
& Technology Research Foundation disclaims any liability for use of 
this software for patient care or in clinical settings. This software 
was developed solely for use in medical and public health research, and 
was not intended, designed, or validated to guide patient care.
*/ 



/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.fstrf.stanfordAsiInterpreter.resistance.grammar.node;

import java.util.*;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.analysis.*;

@SuppressWarnings("all") public final class AExactlySelectstatement2 extends PSelectstatement2
{
    private TExactly _exactly_;
    private TInteger _integer_;
    private TFrom _from_;
    private TLPar _lPar_;
    private PSelectlist _selectlist_;
    private TRPar _rPar_;

    public AExactlySelectstatement2()
    {
    }

    public AExactlySelectstatement2(
        TExactly _exactly_,
        TInteger _integer_,
        TFrom _from_,
        TLPar _lPar_,
        PSelectlist _selectlist_,
        TRPar _rPar_)
    {
        setExactly(_exactly_);

        setInteger(_integer_);

        setFrom(_from_);

        setLPar(_lPar_);

        setSelectlist(_selectlist_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new AExactlySelectstatement2(
            (TExactly) cloneNode(_exactly_),
            (TInteger) cloneNode(_integer_),
            (TFrom) cloneNode(_from_),
            (TLPar) cloneNode(_lPar_),
            (PSelectlist) cloneNode(_selectlist_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExactlySelectstatement2(this);
    }

    public TExactly getExactly()
    {
        return _exactly_;
    }

    public void setExactly(TExactly node)
    {
        if(_exactly_ != null)
        {
            _exactly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exactly_ = node;
    }

    public TInteger getInteger()
    {
        return _integer_;
    }

    public void setInteger(TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _integer_ = node;
    }

    public TFrom getFrom()
    {
        return _from_;
    }

    public void setFrom(TFrom node)
    {
        if(_from_ != null)
        {
            _from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _from_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PSelectlist getSelectlist()
    {
        return _selectlist_;
    }

    public void setSelectlist(PSelectlist node)
    {
        if(_selectlist_ != null)
        {
            _selectlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _selectlist_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exactly_)
            + toString(_integer_)
            + toString(_from_)
            + toString(_lPar_)
            + toString(_selectlist_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_exactly_ == child)
        {
            _exactly_ = null;
            return;
        }

        if(_integer_ == child)
        {
            _integer_ = null;
            return;
        }

        if(_from_ == child)
        {
            _from_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_selectlist_ == child)
        {
            _selectlist_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exactly_ == oldChild)
        {
            setExactly((TExactly) newChild);
            return;
        }

        if(_integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        if(_from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_selectlist_ == oldChild)
        {
            setSelectlist((PSelectlist) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}

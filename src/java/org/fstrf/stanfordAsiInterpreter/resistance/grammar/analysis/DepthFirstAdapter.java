/**
Copyright 2017 Frontier Science & Technology Research Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

ADDITIONAL DISCLAIMER:
In addition to the standard warranty exclusions and limitations of 
liability set forth in sections 7, 8 and 9 of the Apache 2.0 license 
that governs the use and development of this software, Frontier Science 
& Technology Research Foundation disclaims any liability for use of 
this software for patient care or in clinical settings. This software 
was developed solely for use in medical and public health research, and 
was not intended, designed, or validated to guide patient care.
*/ 



/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.fstrf.stanfordAsiInterpreter.resistance.grammar.analysis;

import java.util.*;
import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.*;

@SuppressWarnings("all") public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStatement().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inALogicstatementStatement(ALogicstatementStatement node)
    {
        defaultIn(node);
    }

    public void outALogicstatementStatement(ALogicstatementStatement node)
    {
        defaultOut(node);
    }

    public void caseALogicstatementStatement(ALogicstatementStatement node)
    {
        inALogicstatementStatement(node);
        if(node.getBooleancondition() != null)
        {
            node.getBooleancondition().apply(this);
        }
        outALogicstatementStatement(node);
    }

    public void inAScoreStatement(AScoreStatement node)
    {
        defaultIn(node);
    }

    public void outAScoreStatement(AScoreStatement node)
    {
        defaultOut(node);
    }

    public void caseAScoreStatement(AScoreStatement node)
    {
        inAScoreStatement(node);
        if(node.getScorecondition() != null)
        {
            node.getScorecondition().apply(this);
        }
        outAScoreStatement(node);
    }

    public void inABooleancondition(ABooleancondition node)
    {
        defaultIn(node);
    }

    public void outABooleancondition(ABooleancondition node)
    {
        defaultOut(node);
    }

    public void caseABooleancondition(ABooleancondition node)
    {
        inABooleancondition(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        {
            Object temp[] = node.getCondition2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCondition2) temp[i]).apply(this);
            }
        }
        outABooleancondition(node);
    }

    public void inAStatementCondition(AStatementCondition node)
    {
        defaultIn(node);
    }

    public void outAStatementCondition(AStatementCondition node)
    {
        defaultOut(node);
    }

    public void caseAStatementCondition(AStatementCondition node)
    {
        inAStatementCondition(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBooleancondition() != null)
        {
            node.getBooleancondition().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAStatementCondition(node);
    }

    public void inAResidueCondition(AResidueCondition node)
    {
        defaultIn(node);
    }

    public void outAResidueCondition(AResidueCondition node)
    {
        defaultOut(node);
    }

    public void caseAResidueCondition(AResidueCondition node)
    {
        inAResidueCondition(node);
        if(node.getResidue() != null)
        {
            node.getResidue().apply(this);
        }
        outAResidueCondition(node);
    }

    public void inAExcludeCondition(AExcludeCondition node)
    {
        defaultIn(node);
    }

    public void outAExcludeCondition(AExcludeCondition node)
    {
        defaultOut(node);
    }

    public void caseAExcludeCondition(AExcludeCondition node)
    {
        inAExcludeCondition(node);
        if(node.getExcludestatement() != null)
        {
            node.getExcludestatement().apply(this);
        }
        outAExcludeCondition(node);
    }

    public void inASelectCondition(ASelectCondition node)
    {
        defaultIn(node);
    }

    public void outASelectCondition(ASelectCondition node)
    {
        defaultOut(node);
    }

    public void caseASelectCondition(ASelectCondition node)
    {
        inASelectCondition(node);
        if(node.getSelectstatement() != null)
        {
            node.getSelectstatement().apply(this);
        }
        outASelectCondition(node);
    }

    public void inACondition2(ACondition2 node)
    {
        defaultIn(node);
    }

    public void outACondition2(ACondition2 node)
    {
        defaultOut(node);
    }

    public void caseACondition2(ACondition2 node)
    {
        inACondition2(node);
        if(node.getLogicsymbol() != null)
        {
            node.getLogicsymbol().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outACondition2(node);
    }

    public void inAAndLogicsymbol(AAndLogicsymbol node)
    {
        defaultIn(node);
    }

    public void outAAndLogicsymbol(AAndLogicsymbol node)
    {
        defaultOut(node);
    }

    public void caseAAndLogicsymbol(AAndLogicsymbol node)
    {
        inAAndLogicsymbol(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndLogicsymbol(node);
    }

    public void inAOrLogicsymbol(AOrLogicsymbol node)
    {
        defaultIn(node);
    }

    public void outAOrLogicsymbol(AOrLogicsymbol node)
    {
        defaultOut(node);
    }

    public void caseAOrLogicsymbol(AOrLogicsymbol node)
    {
        inAOrLogicsymbol(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrLogicsymbol(node);
    }

    public void inAResidueResidue(AResidueResidue node)
    {
        defaultIn(node);
    }

    public void outAResidueResidue(AResidueResidue node)
    {
        defaultOut(node);
    }

    public void caseAResidueResidue(AResidueResidue node)
    {
        inAResidueResidue(node);
        if(node.getOriginalaminoacid() != null)
        {
            node.getOriginalaminoacid().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        {
            Object temp[] = node.getMutatedaminoacid().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TAminoAcid) temp[i]).apply(this);
            }
        }
        outAResidueResidue(node);
    }

    public void inAResiduenotResidue(AResiduenotResidue node)
    {
        defaultIn(node);
    }

    public void outAResiduenotResidue(AResiduenotResidue node)
    {
        defaultOut(node);
    }

    public void caseAResiduenotResidue(AResiduenotResidue node)
    {
        inAResiduenotResidue(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getOriginalaminoacid() != null)
        {
            node.getOriginalaminoacid().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        {
            Object temp[] = node.getMutatedaminoacid().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TAminoAcid) temp[i]).apply(this);
            }
        }
        outAResiduenotResidue(node);
    }

    public void inAResidueinvertResidue(AResidueinvertResidue node)
    {
        defaultIn(node);
    }

    public void outAResidueinvertResidue(AResidueinvertResidue node)
    {
        defaultOut(node);
    }

    public void caseAResidueinvertResidue(AResidueinvertResidue node)
    {
        inAResidueinvertResidue(node);
        if(node.getOriginalaminoacid() != null)
        {
            node.getOriginalaminoacid().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        {
            Object temp[] = node.getMutatedaminoacid().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TAminoAcid) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAResidueinvertResidue(node);
    }

    public void inAExcludestatement(AExcludestatement node)
    {
        defaultIn(node);
    }

    public void outAExcludestatement(AExcludestatement node)
    {
        defaultOut(node);
    }

    public void caseAExcludestatement(AExcludestatement node)
    {
        inAExcludestatement(node);
        if(node.getExclude() != null)
        {
            node.getExclude().apply(this);
        }
        if(node.getResidue() != null)
        {
            node.getResidue().apply(this);
        }
        outAExcludestatement(node);
    }

    public void inASelectstatement(ASelectstatement node)
    {
        defaultIn(node);
    }

    public void outASelectstatement(ASelectstatement node)
    {
        defaultOut(node);
    }

    public void caseASelectstatement(ASelectstatement node)
    {
        inASelectstatement(node);
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getSelectstatement2() != null)
        {
            node.getSelectstatement2().apply(this);
        }
        outASelectstatement(node);
    }

    public void inAExactlySelectstatement2(AExactlySelectstatement2 node)
    {
        defaultIn(node);
    }

    public void outAExactlySelectstatement2(AExactlySelectstatement2 node)
    {
        defaultOut(node);
    }

    public void caseAExactlySelectstatement2(AExactlySelectstatement2 node)
    {
        inAExactlySelectstatement2(node);
        if(node.getExactly() != null)
        {
            node.getExactly().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSelectlist() != null)
        {
            node.getSelectlist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExactlySelectstatement2(node);
    }

    public void inAAtleastSelectstatement2(AAtleastSelectstatement2 node)
    {
        defaultIn(node);
    }

    public void outAAtleastSelectstatement2(AAtleastSelectstatement2 node)
    {
        defaultOut(node);
    }

    public void caseAAtleastSelectstatement2(AAtleastSelectstatement2 node)
    {
        inAAtleastSelectstatement2(node);
        if(node.getAtleast() != null)
        {
            node.getAtleast().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSelectlist() != null)
        {
            node.getSelectlist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAAtleastSelectstatement2(node);
    }

    public void inANotmorethanSelectstatement2(ANotmorethanSelectstatement2 node)
    {
        defaultIn(node);
    }

    public void outANotmorethanSelectstatement2(ANotmorethanSelectstatement2 node)
    {
        defaultOut(node);
    }

    public void caseANotmorethanSelectstatement2(ANotmorethanSelectstatement2 node)
    {
        inANotmorethanSelectstatement2(node);
        if(node.getNotmorethan() != null)
        {
            node.getNotmorethan().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSelectlist() != null)
        {
            node.getSelectlist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outANotmorethanSelectstatement2(node);
    }

    public void inAAtleastnotmorethanSelectstatement2(AAtleastnotmorethanSelectstatement2 node)
    {
        defaultIn(node);
    }

    public void outAAtleastnotmorethanSelectstatement2(AAtleastnotmorethanSelectstatement2 node)
    {
        defaultOut(node);
    }

    public void caseAAtleastnotmorethanSelectstatement2(AAtleastnotmorethanSelectstatement2 node)
    {
        inAAtleastnotmorethanSelectstatement2(node);
        if(node.getAtleast() != null)
        {
            node.getAtleast().apply(this);
        }
        if(node.getAtleastnumber() != null)
        {
            node.getAtleastnumber().apply(this);
        }
        if(node.getLogicsymbol() != null)
        {
            node.getLogicsymbol().apply(this);
        }
        if(node.getNotmorethan() != null)
        {
            node.getNotmorethan().apply(this);
        }
        if(node.getNotmorethannumber() != null)
        {
            node.getNotmorethannumber().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSelectlist() != null)
        {
            node.getSelectlist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAAtleastnotmorethanSelectstatement2(node);
    }

    public void inASelectlist(ASelectlist node)
    {
        defaultIn(node);
    }

    public void outASelectlist(ASelectlist node)
    {
        defaultOut(node);
    }

    public void caseASelectlist(ASelectlist node)
    {
        inASelectlist(node);
        if(node.getResidue() != null)
        {
            node.getResidue().apply(this);
        }
        {
            Object temp[] = node.getListitems().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PListitems) temp[i]).apply(this);
            }
        }
        outASelectlist(node);
    }

    public void inAListitems(AListitems node)
    {
        defaultIn(node);
    }

    public void outAListitems(AListitems node)
    {
        defaultOut(node);
    }

    public void caseAListitems(AListitems node)
    {
        inAListitems(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getResidue() != null)
        {
            node.getResidue().apply(this);
        }
        outAListitems(node);
    }

    public void inAScorecondition(AScorecondition node)
    {
        defaultIn(node);
    }

    public void outAScorecondition(AScorecondition node)
    {
        defaultOut(node);
    }

    public void caseAScorecondition(AScorecondition node)
    {
        inAScorecondition(node);
        if(node.getScore() != null)
        {
            node.getScore().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getScorelist() != null)
        {
            node.getScorelist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAScorecondition(node);
    }

    public void inAScorelist(AScorelist node)
    {
        defaultIn(node);
    }

    public void outAScorelist(AScorelist node)
    {
        defaultOut(node);
    }

    public void caseAScorelist(AScorelist node)
    {
        inAScorelist(node);
        if(node.getScoreitem() != null)
        {
            node.getScoreitem().apply(this);
        }
        {
            Object temp[] = node.getScoreitems().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PScoreitems) temp[i]).apply(this);
            }
        }
        outAScorelist(node);
    }

    public void inAStatementScoreitem(AStatementScoreitem node)
    {
        defaultIn(node);
    }

    public void outAStatementScoreitem(AStatementScoreitem node)
    {
        defaultOut(node);
    }

    public void caseAStatementScoreitem(AStatementScoreitem node)
    {
        inAStatementScoreitem(node);
        if(node.getBooleancondition() != null)
        {
            node.getBooleancondition().apply(this);
        }
        if(node.getMapper() != null)
        {
            node.getMapper().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAStatementScoreitem(node);
    }

    public void inAMaxScoreitem(AMaxScoreitem node)
    {
        defaultIn(node);
    }

    public void outAMaxScoreitem(AMaxScoreitem node)
    {
        defaultOut(node);
    }

    public void caseAMaxScoreitem(AMaxScoreitem node)
    {
        inAMaxScoreitem(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getScorelist() != null)
        {
            node.getScorelist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMaxScoreitem(node);
    }

    public void inAScoreitems(AScoreitems node)
    {
        defaultIn(node);
    }

    public void outAScoreitems(AScoreitems node)
    {
        defaultOut(node);
    }

    public void caseAScoreitems(AScoreitems node)
    {
        inAScoreitems(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getScoreitem() != null)
        {
            node.getScoreitem().apply(this);
        }
        outAScoreitems(node);
    }

    public void inAIntegerNumber(AIntegerNumber node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumber(AIntegerNumber node)
    {
        defaultOut(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        inAIntegerNumber(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerNumber(node);
    }

    public void inAFloatNumber(AFloatNumber node)
    {
        defaultIn(node);
    }

    public void outAFloatNumber(AFloatNumber node)
    {
        defaultOut(node);
    }

    public void caseAFloatNumber(AFloatNumber node)
    {
        inAFloatNumber(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatNumber(node);
    }
}

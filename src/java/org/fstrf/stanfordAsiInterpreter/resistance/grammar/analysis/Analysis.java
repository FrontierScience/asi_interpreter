/**
Copyright 2017 Frontier Science & Technology Research Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

ADDITIONAL DISCLAIMER:
In addition to the standard warranty exclusions and limitations of 
liability set forth in sections 7, 8 and 9 of the Apache 2.0 license 
that governs the use and development of this software, Frontier Science 
& Technology Research Foundation disclaims any liability for use of 
this software for patient care or in clinical settings. This software 
was developed solely for use in medical and public health research, and 
was not intended, designed, or validated to guide patient care.
*/ 



/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.fstrf.stanfordAsiInterpreter.resistance.grammar.analysis;

import org.fstrf.stanfordAsiInterpreter.resistance.grammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseALogicstatementStatement(ALogicstatementStatement node);
    void caseAScoreStatement(AScoreStatement node);
    void caseABooleancondition(ABooleancondition node);
    void caseAStatementCondition(AStatementCondition node);
    void caseAResidueCondition(AResidueCondition node);
    void caseAExcludeCondition(AExcludeCondition node);
    void caseASelectCondition(ASelectCondition node);
    void caseACondition2(ACondition2 node);
    void caseAAndLogicsymbol(AAndLogicsymbol node);
    void caseAOrLogicsymbol(AOrLogicsymbol node);
    void caseAResidueResidue(AResidueResidue node);
    void caseAResiduenotResidue(AResiduenotResidue node);
    void caseAResidueinvertResidue(AResidueinvertResidue node);
    void caseAExcludestatement(AExcludestatement node);
    void caseASelectstatement(ASelectstatement node);
    void caseAExactlySelectstatement2(AExactlySelectstatement2 node);
    void caseAAtleastSelectstatement2(AAtleastSelectstatement2 node);
    void caseANotmorethanSelectstatement2(ANotmorethanSelectstatement2 node);
    void caseAAtleastnotmorethanSelectstatement2(AAtleastnotmorethanSelectstatement2 node);
    void caseASelectlist(ASelectlist node);
    void caseAListitems(AListitems node);
    void caseAScorecondition(AScorecondition node);
    void caseAScorelist(AScorelist node);
    void caseAStatementScoreitem(AStatementScoreitem node);
    void caseAMaxScoreitem(AMaxScoreitem node);
    void caseAScoreitems(AScoreitems node);
    void caseAIntegerNumber(AIntegerNumber node);
    void caseAFloatNumber(AFloatNumber node);

    void caseTMin(TMin node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTExclude(TExclude node);
    void caseTSelect(TSelect node);
    void caseTFrom(TFrom node);
    void caseTAtleast(TAtleast node);
    void caseTExactly(TExactly node);
    void caseTNotmorethan(TNotmorethan node);
    void caseTScore(TScore node);
    void caseTMax(TMax node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTMapper(TMapper node);
    void caseTComma(TComma node);
    void caseTBlank(TBlank node);
    void caseTInteger(TInteger node);
    void caseTFloat(TFloat node);
    void caseTAminoAcid(TAminoAcid node);
    void caseEOF(EOF node);
}
